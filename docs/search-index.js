var searchIndex = JSON.parse('{\
"gff_stats":{"doc":"","t":[2,0,0,0,5,5,5,17,3,3,3,12,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,4,17,3,13,3,17,13,3,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Degeneracy","seq","stat","utils","generate_seqs","run_cds","run_spliced","HEADERS","Output","SplicedCDS","Writer","attr_id","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calculate_stats","calculate_stats_spliced","calculate_stats_unspliced","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","end","fasta_id","fmt","from","from","from","from_subset","from_subset","from_subset","gc_3_stats","gc_four_stats","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","output","seq","start","start","stats","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","AA_TABLE_CANONICAL","ASCII_TO_INDEX","Degeneracy","FOURFOLD_DEG","FourFoldStats","Fourfold","GC3Stats","SIXFOLD_DEG","Sixfold","Stats","at_percent","at_percent","at_percent","at_skew","at_skew","at_skew","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","fmt","four_fold_site_stats","from","from","from","from","from_str","from_subset","from_subset","from_subset","from_subset","gc_3","gc_four_fold_deg_sites","gc_percent","gc_percent","gc_percent","gc_skew","gc_skew","gc_skew","init","init","init","init","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","partial_cmp","reverse_complement","switch_base","to_owned","to_possible_value","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","translate","trim_sequence","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_variants","vzip","vzip","vzip","vzip","whole_seq_stats"],"q":["gff_stats","","","","gff_stats::seq","","","gff_stats::stat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gff_stats::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For easier access to degeneracy enum","Sequence based manipulations on a GFF3/fasta combination.","Statistical manipulations on a GFF3/fasta combination.","Utility functions used in other modules.","Wrapper function to generate the sequences (either …","Non-spliced version of the function which prints out …","Spliced version of the function which prints out sequences …","The headers of the output table.","Data structure sent through the parallel iterator.","Store the spliced CDS sequences","Wrapper for a vector of type <code>Output</code>.","ID of the GFF3 attribute","","","","","","","Wrapper function to calculate statistics on sequences from …","Spliced version of the function which prints out …","Non-spliced version of the function which prints out …","","","","","","","","","","Index end of the sequence","Index end of the sequence","ID of the fasta","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The GC content of the third codon position","The four-fold-degenerate statistics calculated on the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The sequence of the CDS","Index start of the sequence","Index start of the sequence","The statistics generated on the sequence","","","","","","","","","","","","","","","","","","","Write a vector of type <code>Output</code>.","<code>&lt;https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi&gt;</code> …","Maps an ASCII character to array index.","","The fourfold degenerate codons.","Statistics on the 4-fold-degenerate-sites.","","GC content at the third codon position.","The sixfold degenerate codons. Includes Leucine, Serine …","","Statistics on the whole sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take the vector of degenerate codons and calculate …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calculate the GC content of the third position of a codon.","Take a trimmed sequence and return a vector of …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Reverse complement a string of DNA.","Switch bases to their complement.","","","","","","","","","","","","Taken directly from …","From the fasta sequence iteration, get the subsequence and …","","","","","","","","","","","","","","","","","","Simply calculate basic statistics on a <code>&amp;str</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,24,24,14,8,24,14,8,0,0,0,24,14,8,24,14,8,24,14,8,24,8,24,8,24,14,8,24,14,8,24,24,24,14,8,24,14,8,24,14,8,14,8,24,8,24,24,14,8,24,14,8,24,14,8,24,14,8,24,14,8,24,14,8,14,0,0,0,0,0,5,0,0,5,0,23,18,16,23,18,16,23,18,5,16,23,18,5,16,5,5,5,16,23,18,5,16,23,18,5,16,23,18,5,16,5,5,5,0,23,18,5,16,5,23,18,5,16,0,0,23,18,16,23,18,16,23,18,5,16,23,18,5,16,23,18,5,16,5,0,0,5,5,5,23,18,5,16,23,18,5,16,0,0,23,18,5,16,23,18,5,16,23,18,5,16,5,23,18,5,16,0],"f":[0,0,0,0,[1,2],[[3,3,4],2],[[3,3,4],2],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[[3,3,5,6],2],[[3,3,5,6],2],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,0,0,[[8,9],10],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],4],[[],4],[[],4],0,0,0,0,0,[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[14,6],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],[[5,5],15],[[],16],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[5,5],4],[[],4],[[5,9],10],[17,18],[[]],[[]],[[]],[[]],[19,[[12,[5]]]],[[]],[[]],[[]],[[]],[[19,[11,[20]]],16],[[19,5],17],0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[5,5],[[11,[15]]]],[19,20],[21,21],[[]],[5,[[11,[22]]]],[[],20],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[],20],[[7,7,19,4]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[19,23]],"p":[[3,"ArgMatches"],[6,"Result"],[3,"PathBuf"],[15,"bool"],[4,"Degeneracy"],[3,"BufWriter"],[15,"usize"],[3,"SplicedCDS"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"Writer"],[4,"Ordering"],[3,"GC3Stats"],[3,"Vec"],[3,"FourFoldStats"],[15,"str"],[3,"String"],[15,"char"],[3,"PossibleValue"],[3,"Stats"],[3,"Output"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
